// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/utils.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIUtilsService is a mock of IUtilsService interface.
type MockIUtilsService struct {
	ctrl     *gomock.Controller
	recorder *MockIUtilsServiceMockRecorder
}

// MockIUtilsServiceMockRecorder is the mock recorder for MockIUtilsService.
type MockIUtilsServiceMockRecorder struct {
	mock *MockIUtilsService
}

// NewMockIUtilsService creates a new mock instance.
func NewMockIUtilsService(ctrl *gomock.Controller) *MockIUtilsService {
	mock := &MockIUtilsService{ctrl: ctrl}
	mock.recorder = &MockIUtilsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUtilsService) EXPECT() *MockIUtilsServiceMockRecorder {
	return m.recorder
}

// GenerateID mocks base method.
func (m *MockIUtilsService) GenerateID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GenerateID indicates an expected call of GenerateID.
func (mr *MockIUtilsServiceMockRecorder) GenerateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateID", reflect.TypeOf((*MockIUtilsService)(nil).GenerateID))
}

// HashPassword mocks base method.
func (m *MockIUtilsService) HashPassword(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockIUtilsServiceMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockIUtilsService)(nil).HashPassword), password)
}
