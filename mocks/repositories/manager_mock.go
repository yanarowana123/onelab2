// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/manager.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/yanarowana123/onelab2/internal/models"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserRepository) Create(ctx context.Context, user models.CreateUserRequest) (*models.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserRepository)(nil).Create), ctx, user)
}

// GetByID mocks base method.
func (m *MockIUserRepository) GetByID(ctx context.Context, ID uuid.UUID) (*models.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIUserRepositoryMockRecorder) GetByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUserRepository)(nil).GetByID), ctx, ID)
}

// GetByLogin mocks base method.
func (m *MockIUserRepository) GetByLogin(ctx context.Context, login string) (*models.AuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(*models.AuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockIUserRepositoryMockRecorder) GetByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockIUserRepository)(nil).GetByLogin), ctx, login)
}

// GetListWithBooks mocks base method.
func (m *MockIUserRepository) GetListWithBooks(ctx context.Context, page, pageSize int) (*models.UserWithBookList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListWithBooks", ctx, page, pageSize)
	ret0, _ := ret[0].(*models.UserWithBookList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListWithBooks indicates an expected call of GetListWithBooks.
func (mr *MockIUserRepositoryMockRecorder) GetListWithBooks(ctx, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListWithBooks", reflect.TypeOf((*MockIUserRepository)(nil).GetListWithBooks), ctx, page, pageSize)
}

// GetListWithBooksQuantity mocks base method.
func (m *MockIUserRepository) GetListWithBooksQuantity(ctx context.Context, page, pageSize int, dateFrom time.Time) (*models.UserWithBookQuantityList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListWithBooksQuantity", ctx, page, pageSize, dateFrom)
	ret0, _ := ret[0].(*models.UserWithBookQuantityList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListWithBooksQuantity indicates an expected call of GetListWithBooksQuantity.
func (mr *MockIUserRepositoryMockRecorder) GetListWithBooksQuantity(ctx, page, pageSize, dateFrom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListWithBooksQuantity", reflect.TypeOf((*MockIUserRepository)(nil).GetListWithBooksQuantity), ctx, page, pageSize, dateFrom)
}

// MockIBookRepository is a mock of IBookRepository interface.
type MockIBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBookRepositoryMockRecorder
}

// MockIBookRepositoryMockRecorder is the mock recorder for MockIBookRepository.
type MockIBookRepositoryMockRecorder struct {
	mock *MockIBookRepository
}

// NewMockIBookRepository creates a new mock instance.
func NewMockIBookRepository(ctrl *gomock.Controller) *MockIBookRepository {
	mock := &MockIBookRepository{ctrl: ctrl}
	mock.recorder = &MockIBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookRepository) EXPECT() *MockIBookRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBookRepository) Create(ctx context.Context, book models.CreateBookRequest) (*models.BookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, book)
	ret0, _ := ret[0].(*models.BookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIBookRepositoryMockRecorder) Create(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBookRepository)(nil).Create), ctx, book)
}

// GetByID mocks base method.
func (m *MockIBookRepository) GetByID(ctx context.Context, ID uuid.UUID) (*models.BookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(*models.BookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIBookRepositoryMockRecorder) GetByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIBookRepository)(nil).GetByID), ctx, ID)
}

// MockICheckoutRepository is a mock of ICheckoutRepository interface.
type MockICheckoutRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICheckoutRepositoryMockRecorder
}

// MockICheckoutRepositoryMockRecorder is the mock recorder for MockICheckoutRepository.
type MockICheckoutRepositoryMockRecorder struct {
	mock *MockICheckoutRepository
}

// NewMockICheckoutRepository creates a new mock instance.
func NewMockICheckoutRepository(ctrl *gomock.Controller) *MockICheckoutRepository {
	mock := &MockICheckoutRepository{ctrl: ctrl}
	mock.recorder = &MockICheckoutRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICheckoutRepository) EXPECT() *MockICheckoutRepositoryMockRecorder {
	return m.recorder
}

// CheckOut mocks base method.
func (m *MockICheckoutRepository) CheckOut(ctx context.Context, checkout models.CreateCheckoutRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOut", ctx, checkout)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckOut indicates an expected call of CheckOut.
func (mr *MockICheckoutRepositoryMockRecorder) CheckOut(ctx, checkout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOut", reflect.TypeOf((*MockICheckoutRepository)(nil).CheckOut), ctx, checkout)
}

// HasUserReturnedBook mocks base method.
func (m *MockICheckoutRepository) HasUserReturnedBook(ctx context.Context, checkOut models.CreateCheckoutRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserReturnedBook", ctx, checkOut)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasUserReturnedBook indicates an expected call of HasUserReturnedBook.
func (mr *MockICheckoutRepositoryMockRecorder) HasUserReturnedBook(ctx, checkOut interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserReturnedBook", reflect.TypeOf((*MockICheckoutRepository)(nil).HasUserReturnedBook), ctx, checkOut)
}

// Return mocks base method.
func (m *MockICheckoutRepository) Return(ctx context.Context, returnBookRequest models.ReturnBookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Return", ctx, returnBookRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Return indicates an expected call of Return.
func (mr *MockICheckoutRepositoryMockRecorder) Return(ctx, returnBookRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Return", reflect.TypeOf((*MockICheckoutRepository)(nil).Return), ctx, returnBookRequest)
}

// MockITransactionRepository is a mock of ITransactionRepository interface.
type MockITransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionRepositoryMockRecorder
}

// MockITransactionRepositoryMockRecorder is the mock recorder for MockITransactionRepository.
type MockITransactionRepositoryMockRecorder struct {
	mock *MockITransactionRepository
}

// NewMockITransactionRepository creates a new mock instance.
func NewMockITransactionRepository(ctrl *gomock.Controller) *MockITransactionRepository {
	mock := &MockITransactionRepository{ctrl: ctrl}
	mock.recorder = &MockITransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionRepository) EXPECT() *MockITransactionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITransactionRepository) Create(ctx context.Context, createTransactionRequest models.CreateTransactionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, createTransactionRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITransactionRepositoryMockRecorder) Create(ctx, createTransactionRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITransactionRepository)(nil).Create), ctx, createTransactionRequest)
}

// GetSumByBookID mocks base method.
func (m *MockITransactionRepository) GetSumByBookID(ctx context.Context, bookID uuid.UUID) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSumByBookID", ctx, bookID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSumByBookID indicates an expected call of GetSumByBookID.
func (mr *MockITransactionRepositoryMockRecorder) GetSumByBookID(ctx, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSumByBookID", reflect.TypeOf((*MockITransactionRepository)(nil).GetSumByBookID), ctx, bookID)
}
